//left recursion removed
TOKENS program id ( ) ; . var : array [ ] num of integer real procedure begin end call , relop addop assignop mulop not + - if then else while do .. 


0. program_statement -> 
0.0	    program id ( identifier_list ) ; declarations subprogram_declarations compound_statement .
0.1	    program id ( identifier_list ) ; declarations compound_statement .
0.2	    program id ( identifier_list ) ; subprogram_declarations compound_statement .
0.3     program id ( identifier_list ) ; compound_statement .

1.0.0 identifier_list ->
1.0.1   id identifier_list_prime

1.0.2  identifier_list_prime ->
1.0.3    , id identifier_list_prime
1.0.4   e

2.0.0 declarations ->
2.0.1   declarations_prime

2.0.2 declarations_prime ->
2.0.3   var id : type ; declarations_prime
2.0.4   e

3. type ->
    standard_type
    array [ num .. num ] of standard_type

4. standard_type ->
    integer
    real

5.0.0 subprogram_declarations ->
5.0.1   subprogram_declarations_prime

5.0.2 subprogram_declarations_prime ->
5.0.2   subprogram_declaration ; subprogram_declarations_prime
5.0.3   e


6. subprogram_declaration ->
6.0    subprogram_head declarations subprogram_declarations compound_statement
6.1    subprogram_head declarations compound_statement
6.2    subprogram_head subprogram_declarations compound_statement
6.3    subprogram_head compound_statement

7. subprogram_head ->
7.0   procedure id arguments ;
7.1	procedure id ;

8. arguments ->
    ( parameter_list )

9.0.0 parameter_list ->
9.0.1    id : type parameter_list_prime
    
9.0.2 parameter_list_prime ->
9.0.3   ; id : parameter_list_prime
9.0.4   e

10. compound_statement ->
10.0    begin optional_statements end
10.1	begin end

11. optional_statements ->
    statement_list

12.0.0 statement_list ->
12.0.1  statement statement_list_prime 

12.0.2 statement_list_prime ->
12.0.3  ; statement statement_list_prime
12.0.4  e

13.0.0 statement ->
13.0.1  variable assignop expression
13.0.2  procedure_statement
13.0.3  begin optional_statements end
13.0.4  begin end
13.0.5  if expression then statement else statement
13.0.6  if expression then statement
13.0.7  while expression do statement

14. variable ->
    id
    id [ expression ]

15. procedure_statement ->
    call id
    call id ( expression_list )

16.0.0 expression_list ->
16.0.1    expression expression_list_prime

16.0.2 expression_list_prime ->
16.0.3  , expression expression_list_prime
16.0.4  e

17. expression ->
    simple_expression
    simple_expression relop simple_expression

18.0.0 simple_expression ->
18.0.1    term simple_expression_prime
18.0.2    sign term simple_expression_prime

18.0.3 simple_expression_prime ->
18.0.3 addop term simple_expression_prime
18.0.5  e

19.0.0 term ->
19.0.1    factor term_prime

19.0.2 term_prime ->
19.0.3    mulop factor term_prime
19.0.4    e

20. factor ->
    id
    num
    ( expression )
    not factor

21. sign ->
    +
    -

